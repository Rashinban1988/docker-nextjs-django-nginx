version: "3"

services:
  web-back:
    container_name: python-backend
    env_file: ./backend/web-back/.env
    build: ./backend/web-back/.
    volumes:
      - ./backend/web-back:/code/
      - static_volume:/code/staticfiles # <-- bind the static volume
    stdin_open: true
    tty: true
    command: gunicorn --bind :8000 config.wsgi:application
    networks:
      - backend_network
    environment:
      - CHOKIDAR_USEPOLLING=true
      - DJANGO_SETTINGS_MODULE=config.local_settings
    depends_on:
      - db

  backend-server:
    container_name: nginx_back
    build:
      context: ./backend/nginx/.
      dockerfile: Dockerfile.dev
    volumes:
      - static_volume:/code/staticfiles # <-- bind the static volume
    ports:
      - "8080:80"
    depends_on:
      - web-back
    networks:
      - backend_network

  db:
    container_name: django-next-mysql
    build: ./mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: todoList
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      TZ: 'Asia/Tokyo'
    volumes:
      - ./mysql_volume:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - backend_network

  celery:
    container_name: celery
    tty: true
    build:
      context: ./backend/web-back/.
    volumes:
      - ./backend/web-back/.:/usr/src/app
    command: celery -A config worker -l info
    depends_on:
      - web-back
      - redis
    networks:
      - backend_network

  monitor:
    container_name: monitor
    tty: true
    build:
      context: ./backend/web-back/.
    volumes:
      - ./backend/web-back/.:/usr/src/app
    ports:
      - 5555:5555
    command: celery -A config flower --port=5555
    depends_on:
      - web-back
      - redis
    networks:
      - backend_network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    tty: true
    ports:
      - 6379:6379
    networks:
      - backend_network

  front-prod:
    container_name: front-prod
    build:
      context: ./frontend/web-front/.
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - '3000:3000'
    networks:
      - frontend_network

  front-dev:
    container_name: front-dev
    build:
      context: ./frontend/web-front/.
      dockerfile: Dockerfile
      target: deps
    command: npm run dev
    ports:
      - '3001:3000'
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
    volumes:
      - ./frontend/web-front:/app
      - /app/node_modules
      - /app/.next
    networks:
      - frontend_network

  frontend-server:
    container_name: nginx_front
    build:
      context: ./frontend/nginx/.
      dockerfile: Dockerfile
    ports:
      - 80:80
    networks:
      - frontend_network

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge

volumes:
  static_volume: